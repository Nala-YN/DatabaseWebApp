{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\");\n}","map":{"version":3,"names":["_createElementBlock"],"sources":["C:\\Users\\faq\\Desktop\\DatabaseWebApp\\client\\src\\components\\Cart.vue"],"sourcesContent":["<template>\r\n  <div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ElHeader } from 'element-plus';\r\nimport { ElMessage } from 'element-plus';\r\nimport detail from './Detail.vue'\r\nexport default {\r\n  name: 'CartView',\r\n  data() {\r\n    return {\r\n      isDetail: false,\r\n      detailId: 1,\r\n      books: [],\r\n      loading:true,\r\n    };\r\n  },\r\n  computed: {\r\n    sumPrice() {\r\n      var sum = 0.0;\r\n      this.books.forEach(element => {\r\n        sum = sum + parseFloat(element.price)\r\n      });\r\n      return sum.toFixed(2);\r\n    }\r\n  },\r\n  methods: {\r\n    toFixed2(str){\r\n      let num = Number(str);\r\n      return isNaN(num) ? str : num.toFixed(2);\r\n    },\r\n    buyAll() {\r\n\r\n      if(this.books.length===0){\r\n        ElMessage({ message: \"您的购物车里还没有书籍\", type: \"error\" })\r\n        return\r\n      }\r\n      this.$http.post('/api/buyAll', {\r\n        user_id: this.$store.getters.status.userid,\r\n      }).then(response => {\r\n        if (response.data.success === false) {\r\n          ElMessage({ message: \"购买失败，余额不足请充值\", type: \"error\" })\r\n        }\r\n        else{\r\n          ElMessage({ message: \"购买成功，请您与售书者联系\", type: \"success\" })\r\n          this.books = []\r\n        }\r\n      }\r\n      ).catch(error => {\r\n        ElMessage({ message: error, type: \"error\" })\r\n        return;\r\n      })\r\n    },\r\n    closeDetail() {\r\n      this.isDetail = false;\r\n    },\r\n    buyBook(index) {\r\n      this.$http.post('/api/buybook', {\r\n        user_id: this.$store.getters.status.userid,\r\n        item_id: this.books[index].id,\r\n      }).then(response => {\r\n        if (response.data.success === false) {\r\n          ElMessage({ message: \"购买失败，余额不足请充值\", type: \"error\" })\r\n        }\r\n      }\r\n      ).catch(error => {\r\n        ElMessage({ message: error, type: \"error\" })\r\n        return;\r\n      })\r\n      ElMessage({ message: \"购买成功，请您与售书者联系\", type: \"success\" })\r\n      this.books.splice(index, 1)\r\n    },\r\n    rmFromCart(index) {\r\n      this.$http.post('/api/rmFromCart', {\r\n        user_id: this.$store.getters.status.userid,\r\n        item_id: this.books[index].id\r\n      }).then().catch(error => {\r\n        ElMessage({ message: error, type: \"error\" })\r\n      })\r\n    },\r\n    gotoDetail(index) {\r\n      this.isDetail = true;\r\n      this.detailId = this.books[index].id;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$http.post(\"/api/getcart\", {\r\n      user_id: this.$store.getters.status.userid,\r\n    }).then(response => {\r\n      this.books = response.data.books\r\n    }).catch(error => {\r\n      ElMessage({ message: error, type: \"error\" })\r\n    })\r\n    setTimeout(()=>{\r\n      this.loading=false\r\n    }, 1000 )\r\n  },\r\n  components: { detail }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.text.item {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.card {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  height: 100px;\r\n  border-radius: 100px;\r\n}\r\n\r\n.image {\r\n  margin-left: 20px;\r\n  /* 距离左边的距离 */\r\n  margin-right: 50px;\r\n}\r\n\r\n.list-item {\r\n  transition: all 0.5s ease;\r\n}\r\n\r\n.list-leave-active {\r\n  position: absolute;\r\n}\r\n\r\n.list-leave-to {\r\n  transform: translateX(100%);\r\n  opacity: 0;\r\n}\r\n\r\n.button {\r\n  margin-left: 50px;\r\n  margin-right: 20px;\r\n}\r\n.centered-col {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  word-break: break-all;\r\n}\r\n.elcard:hover {\r\n  border: 2px solid rgb(144, 205, 255);\r\n}\r\n</style>\r\n"],"mappings":";;uBACEA,mBAAA,CAEM"},"metadata":{},"sourceType":"module","externalDependencies":[]}